
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
0000005c l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .tbss_space	00000000 .tbss_space
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 crt0.c
00000014 l     F .init	00000048 _cstart
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
000002c0 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
00000300 g     F .text	0000004c .hidden __riscv_save_8
02000000 g       .tbss_space	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000394 g     F .text	00000018 .hidden __riscv_restore_3
0000036c g     F .text	00000040 .hidden __riscv_restore_10
00000300 g     F .text	0000004c .hidden __riscv_save_11
000002c0  w      .debug_info	00000000 .hidden t1b_path_planner.c.02fbee13
00000040 g       *ABS*	00000000 __stack_size
00000394 g     F .text	00000018 .hidden __riscv_restore_2
00000000 g       *ABS*	00000000 __bss_size
000003ac g     F .text	00000024 memcpy
000002f0 g     F .text	0000005c .hidden __riscv_save_12
00000000 g       *ABS*	00000000 __data_source_size
0000036c g     F .text	00000040 .hidden __riscv_restore_11
0000034c g     F .text	00000018 .hidden __riscv_save_1
00000394 g     F .text	00000018 .hidden __riscv_restore_0
0000031c g     F .text	00000030 .hidden __riscv_save_7
00000380 g     F .text	0000002c .hidden __riscv_restore_5
02000000 g       .bss	00000000 __bss_end
00000380 g     F .text	0000002c .hidden __riscv_restore_6
00000300 g     F .text	0000004c .hidden __riscv_save_9
000003ec g     F .text	00000008 _set_tls
0000031c g     F .text	00000030 .hidden __riscv_save_4
000003f8 g       *ABS*	00000000 __data_source_end
0000034c g     F .text	00000018 .hidden __riscv_save_3
00000000 g     F .init	00000014 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .tbss_space	00000000 __data_end
000003f8 g       *ABS*	00000000 __tdata_source_end
000003f4 g       .text	00000000 __text_end
00000300 g     F .text	0000004c .hidden __riscv_save_10
00000380 g     F .text	0000002c .hidden __riscv_restore_4
0000036c g     F .text	00000040 .hidden __riscv_restore_8
0000031c g     F .text	00000030 .hidden __riscv_save_6
02000000 g       .tbss_space	00000000 __bss_start
000003d0 g     F .text	0000001c memset
0000036c g     F .text	00000040 .hidden __riscv_restore_9
00000380 g     F .text	0000002c .hidden __riscv_restore_7
0000005c g     F .text	00000294 main
00000100 g       *ABS*	00000000 __ram_size
0000034c g     F .text	00000018 .hidden __riscv_save_2
02000100 g       .init	00000000 __stack
0000031c g     F .text	00000030 .hidden __riscv_save_5
00000000 g     F *ABS*	00000000 vfscanf
000003f8 g       *ABS*	00000000 __data_source
00000364 g     F .text	00000048 .hidden __riscv_restore_12
0000034c g     F .text	00000018 .hidden __riscv_save_0
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000394 g     F .text	00000018 .hidden __riscv_restore_1
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	02000117          	auipc	x2,0x2000
   4:	10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	02000197          	auipc	x3,0x2000
   c:	7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	0040006f          	jal	x0,14 <_cstart>

00000014 <_cstart>:
  14:	    338002ef          	jal	x5,34c <__riscv_save_0>
  18:	    02000537          	lui	x10,0x2000
  1c:	    00000613          	addi	x12,x0,0
  20:	    3f800593          	addi	x11,x0,1016
  24:	    00050513          	addi	x10,x10,0 # 2000000 <__bss_end>
  28:	    384000ef          	jal	x1,3ac <memcpy>
  2c:	    02000537          	lui	x10,0x2000
  30:	    00000593          	addi	x11,x0,0
  34:	    00000613          	addi	x12,x0,0
  38:	    00050513          	addi	x10,x10,0 # 2000000 <__bss_end>
  3c:	    394000ef          	jal	x1,3d0 <memset>
  40:	    02000537          	lui	x10,0x2000
  44:	    00050513          	addi	x10,x10,0 # 2000000 <__bss_end>
  48:	    3a4000ef          	jal	x1,3ec <_set_tls>
  4c:	    00000593          	addi	x11,x0,0
  50:	    00000513          	addi	x10,x0,0
  54:	    008000ef          	jal	x1,5c <main>
  58:	/-- 0000006f          	jal	x0,58 <__stack_size+0x18>

Disassembly of section .text:

0000005c <main>:
     ### 
     ### #endif
     ### 
     ### 
     ###     // Populate the path_planned array
     ###     PATH_PLANNED(0)=0;
  5c:	                      020007b7          	lui	x15,0x2000
  60:	                      0007a823          	sw	x0,16(x15) # 2000010 <__bss_end+0x10>
     ###     PATH_PLANNED(1)=1;
  64:	                      00100713          	addi	x14,x0,1
  68:	                      00e7aa23          	sw	x14,20(x15)
     ###     PATH_PLANNED(2)=2;
  6c:	                      00200713          	addi	x14,x0,2
  70:	                      00e7ac23          	sw	x14,24(x15)
     ###     PATH_PLANNED(3)=3;
  74:	                      00300713          	addi	x14,x0,3
  78:	                      00e7ae23          	sw	x14,28(x15)
     ###     PATH_PLANNED(4)=4;
  7c:	                      00400713          	addi	x14,x0,4
  80:	                      02e7a023          	sw	x14,32(x15)
     ###     PATH_PLANNED(5)=5;
  84:	                      00500693          	addi	x13,x0,5
  88:	                      02d7a223          	sw	x13,36(x15)
     ###     PATH_PLANNED(6)=4;
  8c:	                      02e7a423          	sw	x14,40(x15)
     ###     PATH_PLANNED(7)=6;
  90:	                      00600713          	addi	x14,x0,6
  94:	                      02e7a623          	sw	x14,44(x15)
     ###     PATH_PLANNED(8)=7;
  98:	                      00700713          	addi	x14,x0,7
  9c:	                      02e7a823          	sw	x14,48(x15)
     ###     PATH_PLANNED(9)=8;
  a0:	                      00800693          	addi	x13,x0,8
  a4:	                      02d7aa23          	sw	x13,52(x15)
     ###     PATH_PLANNED(10)=9;
  a8:	                      00900713          	addi	x14,x0,9
  ac:	                      02e7ac23          	sw	x14,56(x15)
     ###     PATH_PLANNED(11)=10;
  b0:	                      00a00613          	addi	x12,x0,10
  b4:	                      02c7ae23          	sw	x12,60(x15)
     ###     PATH_PLANNED(12)=9;
  b8:	                      04e7a023          	sw	x14,64(x15)
     ###     PATH_PLANNED(13)=11;
  bc:	                      00b00613          	addi	x12,x0,11
  c0:	                      04c7a223          	sw	x12,68(x15)
     ###     PATH_PLANNED(14)=9;
  c4:	                      04e7a423          	sw	x14,72(x15)
     ###     PATH_PLANNED(15)=8;
  c8:	                      04d7a623          	sw	x13,76(x15)
     ###     PATH_PLANNED(16)=12;
  cc:	                      00c00713          	addi	x14,x0,12
  d0:	                      04e7a823          	sw	x14,80(x15)
     ###     PATH_PLANNED(17)=13;
  d4:	                      00d00713          	addi	x14,x0,13
  d8:	                      04e7aa23          	sw	x14,84(x15)
     ###     PATH_PLANNED(18)=14;
  dc:	                      00e00713          	addi	x14,x0,14
  e0:	                      04e7ac23          	sw	x14,88(x15)
     ###     PATH_PLANNED(19)=15;
  e4:	                      00f00693          	addi	x13,x0,15
  e8:	                      04d7ae23          	sw	x13,92(x15)
     ###     PATH_PLANNED(20)=14;
  ec:	                      06e7a023          	sw	x14,96(x15)
     ###     PATH_PLANNED(21)=16;
  f0:	                      01000713          	addi	x14,x0,16
  f4:	                      06e7a223          	sw	x14,100(x15)
     ###     PATH_PLANNED(22)=17;
  f8:	                      01100693          	addi	x13,x0,17
  fc:	                      06d7a423          	sw	x13,104(x15)
     ###     PATH_PLANNED(23)=16;
 100:	                      06e7a623          	sw	x14,108(x15)
     ###     PATH_PLANNED(24)=18;
 104:	                      01200713          	addi	x14,x0,18
 108:	                      06e7a823          	sw	x14,112(x15)
     ###     PATH_PLANNED(25)=19;
 10c:	                      01300713          	addi	x14,x0,19
 110:	                      06e7aa23          	sw	x14,116(x15)
     ###     PATH_PLANNED(26)=20;
 114:	                      01400693          	addi	x13,x0,20
 118:	                      06d7ac23          	sw	x13,120(x15)
     ###     PATH_PLANNED(27)=21;
 11c:	                      01500713          	addi	x14,x0,21
 120:	                      06e7ae23          	sw	x14,124(x15)
     ###     PATH_PLANNED(28)=22;
 124:	                      01600613          	addi	x12,x0,22
 128:	                      08c7a023          	sw	x12,128(x15)
     ###     PATH_PLANNED(29)=21;
 12c:	                      08e7a223          	sw	x14,132(x15)
     ###     PATH_PLANNED(30)=23;
 130:	                      01700613          	addi	x12,x0,23
 134:	                      08c7a423          	sw	x12,136(x15)
     ###     PATH_PLANNED(31)=21;
 138:	                      08e7a623          	sw	x14,140(x15)
     ###     PATH_PLANNED(32)=20;
     ###     PATH_PLANNED(32)=24;
 13c:	                      01800713          	addi	x14,x0,24
     ###     PATH_PLANNED(32)=20;
 140:	                      08d7a823          	sw	x13,144(x15)
     ###     PATH_PLANNED(32)=24;
 144:	                      08e7a823          	sw	x14,144(x15)
     ###     PATH_PLANNED(33)=25;
 148:	                      01900713          	addi	x14,x0,25
 14c:	                      08e7aa23          	sw	x14,148(x15)
     ###     PATH_PLANNED(34)=26;
 150:	                      01a00713          	addi	x14,x0,26
 154:	                      08e7ac23          	sw	x14,152(x15)
     ###     PATH_PLANNED(35)=27;
 158:	                      01b00693          	addi	x13,x0,27
 15c:	                      08d7ae23          	sw	x13,156(x15)
     ###     PATH_PLANNED(36)=26;
 160:	                      0ae7a023          	sw	x14,160(x15)
     ###     PATH_PLANNED(37)=28;
 164:	                      01c00713          	addi	x14,x0,28
 168:	                      0ae7a223          	sw	x14,164(x15)
     ###     PATH_PLANNED(38)=29;
 16c:	                      02000637          	lui	x12,0x2000
 170:	                      01d00713          	addi	x14,x0,29
 174:	                      0ae7a423          	sw	x14,168(x15)
     ### int main(int argc, char const *argv[]) {
 178:	                      f6010113          	addi	x2,x2,-160
     ### 
     ###     int startIdx = -1;
     ###     int endIdx = -1;
     ### 
     ###     for (int i = 0; i < 40; ++i) {
 17c:	                      00000713          	addi	x14,x0,0
     ###     int startIdx = -1;
 180:	                      fff00793          	addi	x15,x0,-1
 184:	                      01060813          	addi	x16,x12,16 # 2000010 <__bss_end+0x10>
     ###         if (PATH_PLANNED(i) == START_POINT && startIdx == -1) {
 188:	                      fff00893          	addi	x17,x0,-1
     ###     for (int i = 0; i < 40; ++i) {
 18c:	                      02800513          	addi	x10,x0,40
     ###         if (PATH_PLANNED(i) == START_POINT && startIdx == -1) {
 190:	               /----> 00271693          	slli	x13,x14,0x2
 194:	               |      010686b3          	add	x13,x13,x16
 198:	               |      0006a303          	lw	x6,0(x13)
 19c:	               |      00064583          	lbu	x11,0(x12)
 1a0:	               |      0ff5f593          	andi	x11,x11,255
 1a4:	               |  /-- 00b31663          	bne	x6,x11,1b0 <__ram_size+0xb0>
 1a8:	               |  +-- 01179463          	bne	x15,x17,1b0 <__ram_size+0xb0>
 1ac:	               |  |   00070793          	addi	x15,x14,0
     ###             startIdx = i;
     ###         }
     ###         if (PATH_PLANNED(i) == END_POINT) {
 1b0:	               |  \-> 0006a583          	lw	x11,0(x13)
 1b4:	               |      00464683          	lbu	x13,4(x12)
 1b8:	               |      0ff6f693          	andi	x13,x13,255
 1bc:	               |  /-- 00d58863          	beq	x11,x13,1cc <__ram_size+0xcc>
     ###     for (int i = 0; i < 40; ++i) {
 1c0:	               |  |   00170713          	addi	x14,x14,1
 1c4:	               \--|-- fca716e3          	bne	x14,x10,190 <__ram_size+0x90>
     ###     int endIdx = -1;
 1c8:	                  |   fff00713          	addi	x14,x0,-1
     ###     int connectedIndex = 0;
     ### 
     ###     // Iterate through the path and add connected nodes to the buffer
     ###     int path[40]; // Assuming a maximum path length of 40
     ### 
     ### if (START_POINT < END_POINT) {
 1cc:	                  \-> 020006b7          	lui	x13,0x2000
 1d0:	                      0006c583          	lbu	x11,0(x13) # 2000000 <__bss_end>
 1d4:	                      0046c603          	lbu	x12,4(x13)
 1d8:	                      0ff5f593          	andi	x11,x11,255
 1dc:	                      0ff67613          	andi	x12,x12,255
 1e0:	               /----- 02c5e863          	bltu	x11,x12,210 <__ram_size+0x110>
 1e4:	               |      00010593          	addi	x11,x2,0
 1e8:	               |      00070613          	addi	x12,x14,0
 1ec:	               |      01068693          	addi	x13,x13,16
     ###     for (int i = startIdx, j = 0; i <= endIdx; ++i, ++j) {
     ###         path[j] = PATH_PLANNED(i);
     ###     }
     ### } else {
     ###     // Trace the path from end to start
     ###     for (int i = endIdx, j = 0; i >= startIdx; --i, ++j) {
 1f0:	            /--|--/-X 02f64863          	blt	x12,x15,220 <__ram_size+0x120>
     ###         path[j] = PATH_PLANNED(i);
 1f4:	            |  |  |   00261513          	slli	x10,x12,0x2
 1f8:	            |  |  |   00d50533          	add	x10,x10,x13
 1fc:	            |  |  |   00052503          	lw	x10,0(x10)
     ###     for (int i = endIdx, j = 0; i >= startIdx; --i, ++j) {
 200:	            |  |  |   fff60613          	addi	x12,x12,-1
 204:	            |  |  |   00458593          	addi	x11,x11,4
     ###         path[j] = PATH_PLANNED(i);
 208:	            |  |  |   fea5ae23          	sw	x10,-4(x11)
     ###     for (int i = endIdx, j = 0; i >= startIdx; --i, ++j) {
 20c:	            |  |  \-- fe5ff06f          	jal	x0,1f0 <__ram_size+0xf0>
 210:	            |  \----> 00010593          	addi	x11,x2,0
     ### if (START_POINT < END_POINT) {
 214:	            |         00078613          	addi	x12,x15,0
 218:	            |         01068693          	addi	x13,x13,16
     ###     for (int i = startIdx, j = 0; i <= endIdx; ++i, ++j) {
 21c:	         /--|-----/-X 04c75263          	bge	x14,x12,260 <__ram_size+0x160>
     ###     }
     ### }
     ### 
     ###     // Remove repeated segments from the path
     ###     connectedIndex = removeRepeats(path, endIdx - startIdx + 1, 0);
 220:	         |  \-----|-> 40f707b3          	sub	x15,x14,x15
 224:	         |        |   00178793          	addi	x15,x15,1
 228:	         |        |   00000713          	addi	x14,x0,0
     ###     if (currentIndex >= 2 && path[currentIndex] == path[currentIndex - 2]) {
 22c:	         |        |   00100593          	addi	x11,x0,1
     ###     if (currentIndex >= length) {
 230:	   /-----|-----/--|-X 04f74663          	blt	x14,x15,27c <__ram_size+0x17c>
 234:	   |     |     |  |   02000637          	lui	x12,0x2000
 238:	   |     |     |  |   00271713          	slli	x14,x14,0x2
 23c:	   |     |     |  |   00000793          	addi	x15,x0,0
 240:	   |     |     |  |   11060593          	addi	x11,x12,272 # 2000110 <__stack+0x10>
     ### 
     ###     // Store the final connected nodes back to NODE_POINT
     ###     for (int i = 0; i < connectedIndex; ++i) {
 244:	/--|--/--|-----|--|-X 08e79463          	bne	x15,x14,2cc <t1b_path_planner.c.02fbee13+0xc>
     ###     }
     ### 
     ###     // Now NODE_POINT contains the final connected nodes
     ###     // You can use NODE_POINT as needed in the rest of your code
     ### 
     ###     CPU_DONE = 1;
 248:	|  |  |  |     |  |   020007b7          	lui	x15,0x2000
 24c:	|  |  |  |     |  |   00100713          	addi	x14,x0,1
 250:	|  |  |  |     |  |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ### 
     ###     return 0;
 254:	|  |  |  |     |  |   00000513          	addi	x10,x0,0
 258:	|  |  |  |     |  |   0a010113          	addi	x2,x2,160
 25c:	|  |  |  |     |  |   00008067          	jalr	x0,0(x1)
     ###         path[j] = PATH_PLANNED(i);
 260:	|  |  |  |     |  \-> 00261513          	slli	x10,x12,0x2
 264:	|  |  |  |     |      00d50533          	add	x10,x10,x13
 268:	|  |  |  |     |      00052503          	lw	x10,0(x10)
     ###     for (int i = startIdx, j = 0; i <= endIdx; ++i, ++j) {
 26c:	|  |  |  |     |      00160613          	addi	x12,x12,1
 270:	|  |  |  |     |      00458593          	addi	x11,x11,4
     ###         path[j] = PATH_PLANNED(i);
 274:	|  |  |  |     |      fea5ae23          	sw	x10,-4(x11)
     ###     for (int i = startIdx, j = 0; i <= endIdx; ++i, ++j) {
 278:	|  |  |  \-----|----- fa5ff06f          	jal	x0,21c <__ram_size+0x11c>
     ###     if (currentIndex >= 2 && path[currentIndex] == path[currentIndex - 2]) {
 27c:	|  |  |     /--\----X 04e5d463          	bge	x11,x14,2c4 <t1b_path_planner.c.02fbee13+0x4>
 280:	|  |  |     |         00271613          	slli	x12,x14,0x2
 284:	|  |  |     |         0a010513          	addi	x10,x2,160
 288:	|  |  |     |         00c106b3          	add	x13,x2,x12
 28c:	|  |  |     |         00c50633          	add	x12,x10,x12
 290:	|  |  |     |         f5862603          	lw	x12,-168(x12)
 294:	|  |  |     |         0006a503          	lw	x10,0(x13)
 298:	|  |  |     +-------- 02c51663          	bne	x10,x12,2c4 <t1b_path_planner.c.02fbee13+0x4>
     ###         for (int i = currentIndex - 1; i < length - 2; ++i) {
 29c:	|  |  |     |         fff70613          	addi	x12,x14,-1
 2a0:	|  |  |     |         ffe78793          	addi	x15,x15,-2
 2a4:	|  |  |     |  /----> 00468693          	addi	x13,x13,4
 2a8:	|  |  |     |  |  /-- 00f64663          	blt	x12,x15,2b4 <__ram_size+0x1b4>
     ###         return removeRepeats(path, length - 2, currentIndex - 2);
 2ac:	|  |  |     |  |  |   ffe70713          	addi	x14,x14,-2
 2b0:	|  +--|-----|--|--|-- f81ff06f          	jal	x0,230 <__ram_size+0x130>
     ###             path[i] = path[i + 2];
 2b4:	|  |  |     |  |  \-> 0006a503          	lw	x10,0(x13)
     ###         for (int i = currentIndex - 1; i < length - 2; ++i) {
 2b8:	|  |  |     |  |      00160613          	addi	x12,x12,1
     ###             path[i] = path[i + 2];
 2bc:	|  |  |     |  |      fea6ac23          	sw	x10,-8(x13)
 2c0:	|  |  |     |  \----- fe5ff06f          	jal	x0,2a4 <__ram_size+0x1a4>
     ###         return removeRepeats(path, length, currentIndex + 1);
 2c4:	|  |  |     \-------> 00170713          	addi	x14,x14,1
 2c8:	|  \--|-------------- f69ff06f          	jal	x0,230 <__ram_size+0x130>
     ###         CONNECTED_NODES(i) = path[i];
 2cc:	|     \-------------> 00f10533          	add	x10,x2,x15
 2d0:	|                     00052503          	lw	x10,0(x10)
 2d4:	|                     00b786b3          	add	x13,x15,x11
 2d8:	|                     00478793          	addi	x15,x15,4
 2dc:	|                     00a6a023          	sw	x10,0(x13)
     ###         NODE_POINT = CONNECTED_NODES(i);
 2e0:	|                     0006a683          	lw	x13,0(x13)
 2e4:	|                     0ff6f693          	andi	x13,x13,255
 2e8:	|                     00d60423          	sb	x13,8(x12)
     ###     for (int i = 0; i < connectedIndex; ++i) {
 2ec:	\-------------------- f59ff06f          	jal	x0,244 <__ram_size+0x144>

000002f0 <__riscv_save_12>:
 2f0:	fc010113          	addi	x2,x2,-64
 2f4:	00000313          	addi	x6,x0,0
 2f8:	01b12623          	sw	x27,12(x2)
 2fc:	00c0006f          	jal	x0,308 <__riscv_save_10+0x8>

00000300 <__riscv_save_10>:
 300:	fc010113          	addi	x2,x2,-64
 304:	ff000313          	addi	x6,x0,-16
 308:	01a12823          	sw	x26,16(x2)
 30c:	01912a23          	sw	x25,20(x2)
 310:	01812c23          	sw	x24,24(x2)
 314:	01712e23          	sw	x23,28(x2)
 318:	00c0006f          	jal	x0,324 <__riscv_save_4+0x8>

0000031c <__riscv_save_4>:
 31c:	fc010113          	addi	x2,x2,-64
 320:	fe000313          	addi	x6,x0,-32
 324:	03612023          	sw	x22,32(x2)
 328:	03512223          	sw	x21,36(x2)
 32c:	03412423          	sw	x20,40(x2)
 330:	03312623          	sw	x19,44(x2)
 334:	03212823          	sw	x18,48(x2)
 338:	02912a23          	sw	x9,52(x2)
 33c:	02812c23          	sw	x8,56(x2)
 340:	02112e23          	sw	x1,60(x2)
 344:	40610133          	sub	x2,x2,x6
 348:	00028067          	jalr	x0,0(x5)

0000034c <__riscv_save_0>:
 34c:	ff010113          	addi	x2,x2,-16
 350:	01212023          	sw	x18,0(x2)
 354:	00912223          	sw	x9,4(x2)
 358:	00812423          	sw	x8,8(x2)
 35c:	00112623          	sw	x1,12(x2)
 360:	00028067          	jalr	x0,0(x5)

00000364 <__riscv_restore_12>:
 364:	00c12d83          	lw	x27,12(x2)
 368:	01010113          	addi	x2,x2,16

0000036c <__riscv_restore_10>:
 36c:	00012d03          	lw	x26,0(x2)
 370:	00412c83          	lw	x25,4(x2)
 374:	00812c03          	lw	x24,8(x2)
 378:	00c12b83          	lw	x23,12(x2)
 37c:	01010113          	addi	x2,x2,16

00000380 <__riscv_restore_4>:
 380:	00012b03          	lw	x22,0(x2)
 384:	00412a83          	lw	x21,4(x2)
 388:	00812a03          	lw	x20,8(x2)
 38c:	00c12983          	lw	x19,12(x2)
 390:	01010113          	addi	x2,x2,16

00000394 <__riscv_restore_0>:
 394:	00012903          	lw	x18,0(x2)
 398:	00412483          	lw	x9,4(x2)
 39c:	00812403          	lw	x8,8(x2)
 3a0:	00c12083          	lw	x1,12(x2)
 3a4:	01010113          	addi	x2,x2,16
 3a8:	00008067          	jalr	x0,0(x1)

000003ac <memcpy>:
 3ac:	       00050313          	addi	x6,x10,0
 3b0:	/----- 00060e63          	beq	x12,x0,3cc <memcpy+0x20>
 3b4:	|  /-> 00058383          	lb	x7,0(x11)
 3b8:	|  |   00730023          	sb	x7,0(x6)
 3bc:	|  |   fff60613          	addi	x12,x12,-1
 3c0:	|  |   00130313          	addi	x6,x6,1
 3c4:	|  |   00158593          	addi	x11,x11,1
 3c8:	|  \-- fe0616e3          	bne	x12,x0,3b4 <memcpy+0x8>
 3cc:	\----> 00008067          	jalr	x0,0(x1)

000003d0 <memset>:
 3d0:	       00050313          	addi	x6,x10,0
 3d4:	/----- 00060a63          	beq	x12,x0,3e8 <memset+0x18>
 3d8:	|  /-> 00b30023          	sb	x11,0(x6)
 3dc:	|  |   fff60613          	addi	x12,x12,-1
 3e0:	|  |   00130313          	addi	x6,x6,1
 3e4:	|  \-- fe061ae3          	bne	x12,x0,3d8 <memset+0x8>
 3e8:	\----> 00008067          	jalr	x0,0(x1)

000003ec <_set_tls>:
 3ec:	00050213          	addi	x4,x10,0
 3f0:	00008067          	jalr	x0,0(x1)

000003f4 <__text_end>:
 3f4:	0000                	c.unimp
	...
